// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id           String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  user_id      String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userName      String
  email         String         @unique
  password      String
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts         Posts[]
  Like          Like[]
  Comments      Comments[]
  friends       Friends[]
  Reply         Reply[]
  notification  Notification[]

  @@map("users")
}

type Friends {
  userId   String
  friendId String
}

type Notification {
  userId  String @db.ObjectId
  postId  String
  name    String
  image   String
  message String
}

model Posts {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  caption  String?
  image    String?
  mode     Visibility
  time     DateTime   @default(now())
  userId   String     @db.ObjectId
  like     Like[]
  comment  Comments[]
  likeUser LikeUser[]
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type LikeUser {
  userId String?
  likeId String?
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Like {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  Posts   Posts?  @relation(fields: [postsId], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
  postsId String? @db.ObjectId
  userId  String? @db.ObjectId
}

model Comments {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  comment  String
  createAt DateTime? @default(now())
  User     User?     @relation(fields: [userId], references: [id])
  Posts    Posts?    @relation(fields: [postsId], references: [id])
  postsId  String?   @db.ObjectId
  userId   String?   @db.ObjectId
  reply    Reply[]
}

model Reply {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createAt  DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id])
  comment   Comments  @relation(fields: [commentId], references: [id])
  userId    String    @db.ObjectId
  commentId String    @db.ObjectId
}
